#!/usr/bin/env python3
"""
Teste da integra√ß√£o do pulso de 20ms na aplica√ß√£o completa
"""

import sys
import os
import time

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_booking_with_pulse():
    """Testa o fluxo completo de reserva com pulso"""
    
    print("üéØ TESTE DE INTEGRA√á√ÉO - RESERVA COM PULSO DE 20ms")
    print("=" * 60)
    
    # Importar e inicializar
    from main import GPIOController, initialize_gpio
    from database import LockerDatabase
    
    # Simular inicializa√ß√£o
    print("1. Inicializando sistema...")
    initialize_gpio()
    controller = GPIOController()
    
    print("‚úÖ Sistema inicializado")
    
    # Teste 1: Verificar funcionalidade do pulso
    print("\n2. Testando funcionalidade de pulso...")
    
    start_time = time.time()
    success = controller.pulse_locker_unlock('001', 0.02)
    end_time = time.time()
    duration = (end_time - start_time) * 1000
    
    print(f"   Pulso enviado: {'‚úÖ' if success else '‚ùå'}")
    print(f"   Dura√ß√£o: {duration:.1f}ms")
    
    if not success or duration < 15 or duration > 30:
        print("‚ùå FALHA: Pulso n√£o funcionou corretamente")
        return False
    
    # Teste 2: Simular fluxo de reserva completo
    print("\n3. Simulando fluxo completo de reserva...")
    
    # 3.1 Verificar status inicial
    initial_status = controller.db.get_locker_status('002')
    print(f"   Status inicial cacifo 002: {initial_status}")
    
    if initial_status != 'available':
        # Devolver se estiver ocupado
        controller.db.return_locker('002')
        print("   Cacifo 002 devolvido para teste")
    
    # 3.2 Fazer reserva
    print("   Fazendo reserva...")
    booking_result = controller.db.book_locker('002', 'test@pulse.com', '9876')
    
    if not booking_result or not booking_result.get('success'):
        print(f"‚ùå FALHA na reserva: {booking_result}")
        return False
    
    print(f"   ‚úÖ Reserva bem-sucedida: {booking_result['message']}")
    
    # 3.3 Enviar pulso para abrir
    print("   Enviando pulso para abrir cacifo...")
    
    start_time = time.time()
    pulse_success = controller.pulse_locker_unlock('002', 0.02)
    end_time = time.time()
    pulse_duration = (end_time - start_time) * 1000
    
    if pulse_success:
        print(f"   ‚úÖ Pulso enviado com sucesso ({pulse_duration:.1f}ms)")
    else:
        print("   ‚ùå FALHA no envio do pulso")
        return False
    
    # 3.4 Verificar status ap√≥s reserva
    after_booking_status = controller.db.get_locker_status('002')
    print(f"   Status ap√≥s reserva: {after_booking_status}")
    
    if after_booking_status != 'occupied':
        print("‚ùå FALHA: Status n√£o foi atualizado corretamente")
        return False
    
    # 3.5 Simular devolu√ß√£o
    print("   Simulando devolu√ß√£o...")
    return_success = controller.db.return_locker('002')
    
    if return_success:
        print("   ‚úÖ Cacifo devolvido com sucesso")
    else:
        print("   ‚ùå FALHA na devolu√ß√£o")
        return False
    
    # Verificar status final
    final_status = controller.db.get_locker_status('002')
    print(f"   Status final: {final_status}")
    
    if final_status != 'available':
        print("‚ùå FALHA: Status final incorreto")
        return False
    
    print("\n‚úÖ FLUXO COMPLETO BEM-SUCEDIDO!")
    return True

def test_multiple_lockers_pulse():
    """Testa pulso em m√∫ltiplos cacifos"""
    
    print("\n4. Testando pulso em m√∫ltiplos cacifos...")
    print("-" * 50)
    
    from main import GPIOController, initialize_gpio
    
    controller = GPIOController()
    
    # Testar pulso em todos os cacifos
    lockers = ['001', '002', '003', '004']
    results = {}
    
    for locker in lockers:
        print(f"   Testando cacifo {locker}...")
        
        start_time = time.time()
        success = controller.pulse_locker_unlock(locker, 0.02)
        end_time = time.time()
        duration = (end_time - start_time) * 1000
        
        results[locker] = {
            'success': success,
            'duration': duration
        }
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"     {status} Pulso: {duration:.1f}ms")
        
        time.sleep(0.1)  # Pequena pausa entre cacifos
    
    # Verificar resultados
    all_success = all(r['success'] for r in results.values())
    avg_duration = sum(r['duration'] for r in results.values()) / len(results)
    
    print(f"\n   Resumo:")
    print(f"   Todos bem-sucedidos: {'‚úÖ' if all_success else '‚ùå'}")
    print(f"   Dura√ß√£o m√©dia: {avg_duration:.1f}ms")
    
    return all_success and 15 <= avg_duration <= 30

def test_timing_precision():
    """Testa precis√£o do timing do pulso"""
    
    print("\n5. Testando precis√£o do timing...")
    print("-" * 50)
    
    from main import GPIOController
    
    controller = GPIOController()
    
    # M√∫ltiplos testes para verificar consist√™ncia
    durations = []
    num_tests = 10
    
    for i in range(num_tests):
        start_time = time.time()
        success = controller.pulse_output(3, 0.02)  # Pin 3, 20ms
        end_time = time.time()
        
        if success:
            duration = (end_time - start_time) * 1000
            durations.append(duration)
            print(f"   Teste {i+1:2d}: {duration:.1f}ms")
        else:
            print(f"   Teste {i+1:2d}: ‚ùå FALHA")
            return False
        
        time.sleep(0.05)  # Pequena pausa entre testes
    
    # Calcular estat√≠sticas
    avg = sum(durations) / len(durations)
    min_dur = min(durations)
    max_dur = max(durations)
    variation = max_dur - min_dur
    
    print(f"\n   Estat√≠sticas ({num_tests} testes):")
    print(f"   M√©dia:     {avg:.1f}ms")
    print(f"   M√≠nimo:    {min_dur:.1f}ms")
    print(f"   M√°ximo:    {max_dur:.1f}ms")
    print(f"   Varia√ß√£o:  {variation:.1f}ms")
    
    # Crit√©rios de sucesso
    success_criteria = (
        15 <= avg <= 30 and      # M√©dia dentro da toler√¢ncia
        variation <= 10 and       # Varia√ß√£o baixa
        min_dur >= 10            # M√≠nimo razo√°vel
    )
    
    print(f"   Precis√£o: {'‚úÖ BOA' if success_criteria else '‚ùå RUIM'}")
    
    return success_criteria

def test_error_handling():
    """Testa tratamento de erros"""
    
    print("\n6. Testando tratamento de erros...")
    print("-" * 50)
    
    from main import GPIOController
    
    controller = GPIOController()
    
    # Teste 1: Cacifo inexistente
    print("   Testando cacifo inexistente...")
    result = controller.pulse_locker_unlock('999', 0.02)
    
    if result == False:
        print("   ‚úÖ Erro tratado corretamente")
    else:
        print("   ‚ùå Erro n√£o tratado corretamente")
        return False
    
    # Teste 2: Dura√ß√£o inv√°lida
    print("   Testando dura√ß√£o inv√°lida...")
    try:
        result = controller.pulse_output(3, -0.01)  # Dura√ß√£o negativa
        print("   ‚úÖ Dura√ß√£o negativa tratada")
    except Exception as e:
        print(f"   ‚úÖ Exce√ß√£o capturada: {type(e).__name__}")
    
    # Teste 3: Pin inv√°lido
    print("   Testando pin inv√°lido...")
    try:
        result = controller.pulse_output(999, 0.02)  # Pin inexistente
        print("   ‚úÖ Pin inv√°lido tratado")
    except Exception as e:
        print(f"   ‚úÖ Exce√ß√£o capturada: {type(e).__name__}")
    
    return True

def main():
    """Fun√ß√£o principal de teste"""
    
    try:
        print("üöÄ INICIANDO TESTES DE INTEGRA√á√ÉO DO PULSO")
        print("=" * 60)
        
        # Executar todos os testes
        test1 = test_booking_with_pulse()
        test2 = test_multiple_lockers_pulse()
        test3 = test_timing_precision()
        test4 = test_error_handling()
        
        # Resumo final
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS TESTES:")
        print(f"   Fluxo de Reserva:     {'‚úÖ PASSOU' if test1 else '‚ùå FALHOU'}")
        print(f"   M√∫ltiplos Cacifos:    {'‚úÖ PASSOU' if test2 else '‚ùå FALHOU'}")
        print(f"   Precis√£o do Timing:   {'‚úÖ PASSOU' if test3 else '‚ùå FALHOU'}")
        print(f"   Tratamento de Erros:  {'‚úÖ PASSOU' if test4 else '‚ùå FALHOU'}")
        
        all_passed = test1 and test2 and test3 and test4
        
        print("\n" + "=" * 60)
        if all_passed:
            print("üèÜ TODOS OS TESTES PASSARAM!")
            print("   ‚úÖ Pulso de 20ms totalmente integrado")
            print("   ‚úÖ Funcionalidade pronta para produ√ß√£o")
            print("   ‚úÖ Sistema robusto e confi√°vel")
        else:
            print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
            print("   ‚ùå Verifique a implementa√ß√£o do pulso")
            print("   ‚ùå Corrija os problemas antes de usar em produ√ß√£o")
        
        return all_passed
        
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO DURANTE OS TESTES: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)